# import libraries from flask library , Flask: to use flask ways, render_template: to rendering the actual html file ,
# request: to request input from html file, redirect: to redirect every link we create to html file, url_for: to connect every link with html file
from flask import Flask, render_template, request, redirect, url_for
# to import library of database
from flask_sqlalchemy import SQLAlchemy

# every time you need to use flask, you have to create the object flask
app = Flask(__name__)           # between parentheses are ((shift+ dash bottom twice)(name)(shift+ dash bottom twice))
# use these lines to define our database
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///todo.db'  # to configure our app with location of our database file
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False    # just put it there
db = SQLAlchemy(app)        # create our database

# creat our data base table
class Todo(db.Model):
    id = db.Column(db.Integer, primary_key=True)    # create id column to save the new items we add
    text = db.Column(db.String(200))                # create text column to save the text of the item
    complete = db.Column(db.Boolean)                # create status column to save tasks status is complete(True) or incomplete(False)

# to render the app on html file to show the page of app
# below how you create path for your app using Flask
# ('/') it is mean home page
@app.route('/')
def index():
    # show incomplete list for tasks we create
    incomplete = Todo.query.filter_by(complete=False).all()
    # show complete list for tasks we done
    complete = Todo.query.filter_by(complete=True).all()
    # to return and show the app with all its feature (html file,incomplete tasks, and complete tasks)
    return render_template('index.html', incomplete=incomplete, complete=complete)

# to create the path when you add new tasks with using method POST
@app.route('/add', methods=['POST'])
def add():
    # to create task when you type on html file by request method, (todoitem) is variable on html file, and make it incomplete by default
    todo = Todo(text=request.form['todoitem'], complete=False)
    # to add it to our database
    db.session.add(todo)
    # to save it inside our database we need to commit that:
    db.session.commit()
    # to return our changes to show it in app page
    return redirect(url_for('index'))

# to create the path when you hit complete to certain tasks
@app.route('/complete/<id>')
def complete(id):
    # To add task id to database
    todo = Todo.query.filter_by(id=int(id)).first()
    # To add task status to database
    todo.complete = True
    # To save task on database
    db.session.commit()
    # to return our changes to show it in app page
    return redirect(url_for('index'))

# to create the path when you hit undo to certain tasks
@app.route('/uncheck/<id>')
def uncheck(id):
    #  To add task id to database
    todo = Todo.query.filter_by(id=int(id)).first()
    # To add task status to database
    todo.complete = False
    # To save task on database
    db.session.commit()
    # to return our changes to show it in app page
    return redirect(url_for('index'))

# to create the path when you hit delete to certain tasks
@app.route('/delete/<id>')
def delete(id):
    #  To add task id to database
    todo = Todo.query.filter_by(id=int(id)).first()
    # To delete the task from the database
    db.session.delete(todo)
    # To save task on database
    db.session.commit()
    # to return our changes to show it in app page
    return redirect(url_for('index'))

# you run the app on debug mode to see the change when you refresh the page
if __name__ == '__main__':
    app.run(debug=True)
